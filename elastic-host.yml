AWSTemplateFormatVersion: "2010-09-09"
Description: "Create EC2 for script execution"
Metadata:
  EC2Instance:
    Description: "EC2 for experimenting with Elastic"
Parameters:
  KeyNameParameter:
    Type: String
    Description: Enter key name
  SubnetIdParameter:
    Type: String
    Description: Enter Subnet ID
  VpcIdParameter:
    Type: String
    Description: Enter Subnet ID
  InstanceTypeParameter:
    Type: String
    Default: t3.medium
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m5.large
      - t3.medium
    Description: Enter t2.micro, t2.small, t2.medium. Default is t2.micro.
  ImageIdParameter:
    Type: String
    Default: ami-0279c3b3186e54acd 
    AllowedValues:
      - ami-0742b4e673072066f
      - ami-042e8287309f5df03 
      - ami-0279c3b3186e54acd
    Description: ami-0279c3b3186e54acd is Ubuntu 18.04 in us-east-1, ami-0742b4e673072066f is Amazon Linux 2 x86 in us-east-1, ami-042e8287309f5df03 is x86 Ubuntu 20.04 in us-east-1 
Resources:
    IAMRole5:
        Type: "AWS::IAM::Role"
        Properties:
            Path: "/"
            AssumeRolePolicyDocument: "{\"Version\":\"2012-10-17\",\"Statement\":[{\"Effect\":\"Allow\",\"Principal\":{\"Service\":\"ec2.amazonaws.com\"},\"Action\":\"sts:AssumeRole\"}]}"
            MaxSessionDuration: 3600
            ManagedPolicyArns: 
              - "arn:aws:iam::aws:policy/CloudWatchFullAccess"
            Description: "Allows EC2 instances to call AWS services on your behalf."
    # IAMProfile5:
    #    Type: "AWS::IAM::InstanceProfile"
    #    Properties:
    #        Path: "/"
    #        Roles:
    #        - Ref: IAMRole5
    DemoSecurityGroup:
        Type: AWS::EC2::SecurityGroup
        Properties:
          VpcId: !Ref VpcIdParameter
          GroupDescription: 22 SSH, 9200 Elastic, 5601 Kibana
          SecurityGroupIngress:
          - CidrIp: 0.0.0.0/0
            FromPort: 22
            IpProtocol: tcp
            ToPort: 22
          - CidrIp: 0.0.0.0/0
            FromPort: 80 
            IpProtocol: tcp
            ToPort: 80 
          - CidrIp: 0.0.0.0/0
            FromPort: 9200
            IpProtocol: tcp
            ToPort: 9200
          - CidrIp: 0.0.0.0/0
            FromPort: 5601
            IpProtocol: tcp
            ToPort: 5601
    EC2Instance:
        Type: "AWS::EC2::Instance"
        Properties:
          # IamInstanceProfile: !Ref IAMProfile5
            ImageId: !Ref ImageIdParameter
            InstanceType: !Ref InstanceTypeParameter
            KeyName: !Ref KeyNameParameter 
            AvailabilityZone: "us-east-1b"
            SubnetId: !Ref SubnetIdParameter 
            BlockDeviceMappings:
              - DeviceName: /dev/xvda
                Ebs:
                  VolumeSize: 20
            EbsOptimized: false
            SecurityGroupIds: 
              - !Ref DemoSecurityGroup     
            SourceDestCheck: true
            UserData:
             Fn::Base64: !Sub |
                 #!/bin/bash -ex
                 
                 # STEP 0: start here 
                 echo "Start with USER DATA!!!"

                 # STEP 1 (Ubuntu):  do updates
                 apt-get update -y
                 apt-get install nginx -y

                 # STEP 2 (ubuntu): add elastic related configs
                 wget -qO - https://artifacts.elastic.co/GPG-KEY-elasticsearch | apt-key add -
                 apt-get install apt-transport-https -y
                 echo "deb https://artifacts.elastic.co/packages/7.x/apt stable main" | tee /etc/apt/sources.list.d/elastic-7.x.list
                 apt-get update -y
                 apt-get install elasticsearch -y
                 apt-get install kibana -y

                 # STEP 3: restart daemon
                 systemctl daemon-reload
                 systemctl enable elasticsearch.service
                 systemctl enable kibana.service
                 systemctl enable nginx.service
                 systemctl start elasticsearch.service
                 systemctl start kibana.service
                 systemctl start nginx.service

                 # STEP 4: all done 
                 echo "ALL DONE with USER DATA!!!"
            Tags: 
              - 
                Key: "Name"
                Value: !Join [ "-", ["Elastic-Sandbox", !Ref AWS::StackName ] ]
                #Value: "Cloudwatch sandbox"
                #Value: !Join [ "-", [!Ref EC2Instance, !Ref AWS::StackName ] ]
              - 
                Key: "Project"
                Value: "aws-vs-new-relic"   
Outputs:
  EC2InstanceOutput:
    Description: "The Instance ID of the EC2"
    Value: !Ref EC2Instance
  EC2InstancePrivateIP:
    Description: "The Private IP of the EC2"
    Value: !GetAtt EC2Instance.PrivateIp
  EC2InstancePublicIP:
    Description: "The Public IP of the EC2"
    Value: !GetAtt EC2Instance.PublicIp
  EC2InstanceExpandedOutput:
    Description: "The Instance ID of the EC2"
    Value: !Join [ "-", [!Ref EC2Instance, !Ref AWS::StackName ] ]
